import numpy as np
import gmsh
import math
from parameters import mesh, num
import matplotlib.pyplot as plt

PolyDeg = num.PolyDeg
Nb = num.Nb
N = num.N

# For each GMSH element type we provide
# * the label in HDF5 file,
# * the reordering of the nodes,
# * the swapping of the element direction in case of a negative group tag.
types = {"Line 2": ("line2", [0, 1], [1, 0]),
        "Line 3": ("line3", [0, 2, 1], [2, 1, 0]),
         "Triangle 3": ("triangle3", [0, 1, 2], [0, 2, 1]),
         "Triangle 6": ("triangle6", [0, 3, 1, 4, 2, 5], [0, 5, 4, 3, 2, 1]),
         "Tetrahedron 4": ("tetrahedron4", [0, 2, 1, 3]),
         "Tetrahedron 10": ("tetrahedron10", [0, 6, 2, 5, 1, 4, 7, 8, 9, 3])}

def read_mesh():
    gmsh.initialize()
    gmsh.option.setNumber("General.Terminal", 1)

    # Open the input file
    gmsh.open(mesh.name_file)

    # Read the nodes
    nodeTags, nodeCoords, _ = gmsh.model.mesh.getNodes()
    numNodes = len(nodeTags)
    print("Found " + str(numNodes) + " nodes")

    entities = gmsh.model.getEntities()
    numDim=0
    for e in entities:
        if (e[0]>numDim):
            numDim=e[0]

    if (numDim != num.dim):
        print("ERROR: mesh dimension: not the dimension defined in parapmeters.py ")
        exit

    if numNodes*numDim != len(nodeCoords):
        print("ERROR: node coordinates: invalid size of array")
        exit

    # Resize the node coordinates and store them with the tags
    nodes = {}
    nodes["coordinates"] = nodeCoords.reshape(numNodes, 3)
    nodes["tags"] = nodeTags
    tag_to_index = np.zeros(int(np.max(nodeTags))+1, dtype=int)
    tag_to_index[nodeTags] = np.arange(len(nodeTags))
    nodes["tag_to_index"] = tag_to_index

    # Read all the elements
    elemTypes, elemTags, elemNodeTags = gmsh.model.mesh.getElements()

    # Create the element by types
    elements = {}
    for n in range(len(elemTypes)):
        t = elemTypes[n]
        name, dim, order, numv, parv, _ = gmsh.model.mesh.getElementProperties(t)
        Ne = len(elemTags[n])
        tags = elemTags[n].reshape(Ne, 1)
        for key in types.keys():
            if name == key:
                label = types[key][0]
                nn = types[key][1]
                print("Processing " + str(Ne) + " " + label + " elements")
                elements[label] = {}
                elements[label]["nodes"] = elemNodeTags[n].reshape(Ne, len(nn))[:, nn]
                elements[label]["tags"] = tags-1
                elements[label]["groups"] = np.zeros_like(tags, dtype=int)
                if (numDim==2):
                    ########## The element on the border are of type 'line2', and are the only elements that have one neighbourg
                    ########## The rest of elements ('triangles3') have three neighbourgs, independent of its kind ('line2' or 'triangle3')
                    if (label=='line2'):
                        elements[label]["neigh_element_type"] = np.chararray((len(tags),1), itemsize=10)
                        elements[label]["neigh_element_type"][:] = 'triangle3'
                        elements[label]["neigh_element"] = np.zeros_like(tags, dtype=int)
                        elements[label]["neigh_side"] = np.zeros_like(tags, dtype=int)
                    else:
                        elements[label]["neigh_element_type"] = np.chararray((len(tags),3), itemsize=10)
                        elements[label]["neigh_element_type"][:] = 'triangle3'
                        elements[label]["neigh_element"] = np.zeros((len(tags),3), dtype=int)
                        elements[label]["neigh_side"] = np.zeros((len(tags),3), dtype=int)
                if (numDim==3):
                    if (label=='triangle3'):
                        elements[label]["neigh_element_type"] = np.chararray((len(tags),1), itemsize=10)
                        elements[label]["neigh_element_type"][:] = 'tetrahedron4'
                        elements[label]["neigh_element"] = np.zeros_like(tags, dtype=int)
                        elements[label]["neigh_side"] = np.zeros_like(tags, dtype=int)
                    else:
                        elements[label]["neigh_element_type"] = np.chararray((len(tags),4), itemsize=10)
                        elements[label]["neigh_element_type"][:] = 'tetrahedron4'
                        elements[label]["neigh_element"] = np.zeros((len(tags),4), dtype=int)
                        elements[label]["neigh_side"] = np.zeros((len(tags),4), dtype=int)

    # Go through the list of entities to identify the groups
    entities = gmsh.model.getEntities()
    for e in entities:
        dim = e[0]
        tag = e[1]
        group = gmsh.model.getPhysicalGroupsForEntity(dim, tag)
        if len(group):
            group_number = group[0]
            print("Found group " + str(group_number))
        else:
            pass
        elemTypes, elemTags, elemNodeTags = gmsh.model.mesh.getElements(dim, tag)
        for t in range(len(elemTypes)):
            name, dim, order, numv, parv, _ = gmsh.model.mesh.getElementProperties(elemTypes[t])
            print(" - Element type: " + name + ", order " + str(order) + " (" +
                str(numv) + " nodes in param coord: " + str(parv) + ")")
            for key in types.keys():
                if name == key:
                    label = types[key][0]
                    tags = elements[label]["tags"]
                    for n in range(len(tags)):
                        if tags[n][0]+1 in elemTags[t]:
                            elements[label]["groups"][n] = abs(group_number)
                            # If the group number is negative we have to change the orientation of the element
                            if group_number < 0:
                                elements[label]["nodes"][n, :] = elements[label]["nodes"][n, :][types[key][2]]

    gmsh.clear()
    gmsh.finalize()
    
    return(nodes, elements, Ne)

# Find neighbouring elments
def neighbours(elements):
    keys = list(types.keys())
    ind = []
    for i in range(len(keys)):
        try:
            list(elements).index(types[keys[i]][0])
            ind.append(i)
        except:
            ind = ind
    ind = ind[-2::]
    n_0=len(elements[types[keys[ind[0]]][0]]['nodes']) ## number elements at the border (dim=2) / external faces (dim=3)
    n_1=len(elements[types[keys[ind[1]]][0]]['nodes'])  ##number of elements in the surface (dim=2) / volume (dim=3)
    m_1=len(elements[types[keys[ind[1]]][0]]['nodes'][0]) ## number of nodes that define each triangle3 (dim=2) / tetrahedron4 (dim=3)
    if(num.dim==2):
        for i in range(n_0):
            for j in range(n_1):
                s_1 = elements[types[keys[ind[0]]][0]]['nodes'][i]
                s_2 = elements[types[keys[ind[1]]][0]]['nodes'][j]
                if( len(set.intersection(set(s_1),set(s_2)))==m_1-1):
                    indj, signj = find_pos(s_1,s_2)
                    elements[types[keys[ind[1]]][0]]['neigh_element_type'][j][indj]='line2'
                    elements[types[keys[ind[0]]][0]]['neigh_element'][i][0]=j
                    elements[types[keys[ind[1]]][0]]['neigh_element'][j][indj]=i
                    elements[types[keys[ind[0]]][0]]['neigh_side'][i][0]=(indj+1)*signj
                    elements[types[keys[ind[1]]][0]]['neigh_side'][j][indj]=signj
        
        for i in range(n_1):
            for j in range(i+1,n_1):
                s_1 = elements[types[keys[ind[1]]][0]]['nodes'][i]
                s_2 = elements[types[keys[ind[1]]][0]]['nodes'][j]
                inters = set.intersection(set(s_1),set(s_2))
                if( len(inters)==m_1-1):
                    inters=np.int64(list(inters))
                    indj, signj = find_pos(inters,s_2)
                    if(inters[0]!=s_1[0]):
                        if(inters[0]!=s_1[1]):
                            if(inters[1]==s_1[1]):
                                indi = 1
                                signi = -1
                            else:
                                indi = 2
                                signi = 1
                        else:
                            if(inters[1]==s_1[0]):
                                indi = 0
                                signi = -1
                            else:
                                indi = 1
                                signi = 1
                    else:
                        if(inters[1]==s_1[1]):
                            indi = 0
                            signi = 1
                        else:
                            indi = 2
                            signi = -1
                    elements[types[keys[ind[1]]][0]]['neigh_element'][j][indj]=i
                    elements[types[keys[ind[1]]][0]]['neigh_side'][j][indj]=(indi+1)*signj*signi
                    elements[types[keys[ind[1]]][0]]['neigh_element'][i][indi]=j
                    elements[types[keys[ind[1]]][0]]['neigh_side'][i][indi]=(indj+1)*signj*signi
    
    elif(num.dim==3):
        for i in range(n_0):
            for j in range(n_1):
                s_1 = elements[types[keys[ind[0]]][0]]['nodes'][i]
                s_2 = elements[types[keys[ind[1]]][0]]['nodes'][j]
                if( len(set.intersection(set(s_1),set(s_2)))==m_1-1):
                    indj, signj = find_pos(s_1,s_2)
                    elements[types[keys[ind[1]]][0]]['neigh_element_type'][j][indj]='triangle3'
                    elements[types[keys[ind[0]]][0]]['neigh_element'][i][0]=j
                    elements[types[keys[ind[1]]][0]]['neigh_element'][j][indj]=i
                    elements[types[keys[ind[0]]][0]]['neigh_side'][i][0]=(indj+1)*signj
                    elements[types[keys[ind[1]]][0]]['neigh_side'][j][indj]=signj
        
        for i in range(n_1):
            for j in range(i+1,n_1):
                s_1 = elements[types[keys[ind[1]]][0]]['nodes'][i]
                s_2 = elements[types[keys[ind[1]]][0]]['nodes'][j]
                inters = set.intersection(set(s_1),set(s_2))
                if( len(inters)==m_1-1):
                    inters=np.int64(list(inters))
                    indj, signj = find_pos(inters,s_2)
                    if(inters[0]!=s_1[0]):
                        if(inters[0]!=s_1[1]):
                            if(inters[1]==s_1[1]):
                                indi = 1
                                signi = -1
                            else:
                                indi = 2
                                signi = 1
                        else:
                            if(inters[1]==s_1[0]):
                                indi = 0
                                signi = -1
                            else:
                                indi = 1
                                signi = 1
                    else:
                        if(inters[1]==s_1[1]):
                            indi = 0
                            signi = 1
                        else:
                            indi = 2
                            signi = -1
                    elements[types[keys[ind[1]]][0]]['neigh_element'][j][indj]=i
                    elements[types[keys[ind[1]]][0]]['neigh_side'][j][indj]=(indi+1)*signj*signi
                    elements[types[keys[ind[1]]][0]]['neigh_element'][i][indi]=j
                    elements[types[keys[ind[1]]][0]]['neigh_side'][i][indi]=(indj+1)*signj*signi
    else:
        print('ERROR: Dimension <>2')

    return 0

def Nodes2D(PolyDeg):
    x={}
    y={}
    match PolyDeg:
        case 1:
            x=np.array([-1,     1,     0])
            y=np.array([-0.577350269189626,-0.577350269189626,1.15470053837925])
        case 2:
            x=np.array([-1.0000,         0,    1.0000,   -0.5000,    0.5000,         0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,0.288675134594813,0.288675134594813,1.15470053837925])
        case 3:
            x=np.array([-1,-0.447213595499958,0.447213595499958,1,-0.723606797749979,-1.48724623288896e-16,0.723606797749979,
                        -0.276393202250021,0.276393202250021,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.0986232000259289,-1.03280157353518e-16,
                        -0.0986232000259289,0.675973469215555,0.675973469215555,1.15470053837925])
        case 4:
            x=np.array([-1,-0.654653670707977,-3.16587034365767e-17,0.654653670707977,1,-0.827326835353989,-0.327375261332958,0.327375261332958,
                        0.827326835353989,-0.5,2.08166817117217e-17,0.5,-0.172673164646011,0.172673164646011,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.278271574919028,
                        -0.189010195256608,-0.189010195256608,-0.278271574919028,0.288675134594813,0.378020390513215,0.288675134594813,
                        0.855621844108654,0.855621844108654,1.15470053837925])
        case 5:
            x=np.array([-1,-0.765055323929465,-0.285231516480645,0.285231516480645,0.765055323929465,1,-0.882527661964732,-0.526708771752863,
                        -2.08166817117217e-17,0.526708771752863,0.882527661964732,-0.642615758240323,-0.243131784001888,0.243131784001888,
                        0.642615758240323,-0.357384241759677,1.17961196366423e-16,0.357384241759677,-0.117472338035268,0.117472338035268,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.373882211228636,-0.304095451156053,-0.280744401884088,-0.304095451156053,-0.373882211228636,0.0416573953626145,
                        0.140372200942044,0.140372200942044,0.0416573953626144,0.535692873827011,0.608190902312105,0.535692873827011,
                        0.951232480418262,0.951232480418262,1.15470053837925])
        case 6:
            x=np.array([-1,-0.830223896278567,-0.468848793470714,4.40241681984739e-17,0.468848793470714,0.830223896278567,1,-0.915111948139284,
                        -0.654274744290163,-0.23681695455385,0.23681695455385,0.654274744290162,0.915111948139284,-0.734424396735357,
                        -0.426480024302666,-1.46984691955563e-16,0.426480024302666,0.734424396735357,-0.5,-0.189663069748816,0.189663069748816,
                        0.5,-0.265575603264643,4.16333634234434e-17,0.265575603264643,-0.0848880518607163,0.0848880518607166,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.577350269189626,-0.430319850411323,-0.377745699739899,-0.355730381209952,-0.355730381209952,-0.377745699739899,
                        -0.430319850411323,-0.117359831084509,-0.027224308085523,-9.07537354269073e-17,-0.0272243080855229,-0.117359831084509,
                        0.288675134594813,0.382954689295475,0.382954689295475,0.288675134594813,0.694710100274135,0.755491399479797,
                        0.694710100274135,1.00767011960095,1.00767011960095,1.15470053837925])
        case 7:
            x=np.array([-1,-0.871740148509607,-0.591700181433142,-0.209299217902479,0.209299217902479,0.591700181433142,0.871740148509607,
                        1,-0.935870074254804,-0.735994239141453,-0.403998738706791,-3.46944695195361e-18,0.40399873870679,0.735994239141452,
                        0.935870074254803,-0.795850090716571,-0.553071427522118,-0.197609941643968,0.197609941643967,0.553071427522118,
                        0.795850090716571,-0.60464960895124,-0.346205394185403,3.12250225675825e-17,0.346205394185403,0.604649608951239,
                        -0.395350391048761,-0.149072688815327,0.149072688815327,0.39535039104876,-0.204149909283429,2.0122792321331e-16,
                        0.204149909283429,-0.0641299257451966,0.0641299257451967,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.577350269189626,-0.577350269189626,-0.466273979513326,-0.424926472090331,-0.405383094577336,-0.399763555055686,
                        -0.405383094577336,-0.424926472090331,-0.466273979513326,-0.22375225395015,-0.147181623528284,-0.114090153002691,
                        -0.114090153002691,-0.147181623528284,-0.22375225395015,0.107416694899051,0.199881777527843,0.228180306005382,
                        0.199881777527843,0.107416694899051,0.469933574290574,0.55256471810562,0.55256471810562,0.469933574290575,
                        0.801102523139776,0.849852944180662,0.801102523139775,1.04362424870295,1.04362424870295,1.15470053837925])
        case 8:
            x=np.array([-1,-0.89975799541146,-0.677186279510738,-0.363117463826178,-3.00575901416695e-17,0.363117463826178,0.677186279510738,
                        0.89975799541146,1,-0.94987899770573,-0.792729790414809,-0.52448530650627,-0.183307680821237,0.183307680821237,
                        0.52448530650627,0.792729790414809,0.94987899770573,-0.838593139755369,-0.645155358937042,-0.349806944526908,
                        -3.81639164714898e-17,0.349806944526908,0.645155358937042,0.838593139755369,-0.681558731913089,-0.46952966174961,
                        -0.167017427380848,0.167017427380848,0.46952966174961,0.681558731913089,-0.5,-0.286221980928373,6.93889390390723e-18,
                        0.286221980928373,0.5,-0.318441268086911,-0.120670052430772,0.120670052430772,0.318441268086911,-0.161406860244631,
                        6.93889390390723e-17,0.161406860244631,-0.0501210022942698,0.0501210022942701,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.577350269189626,-0.577350269189626,-0.577350269189626,-0.490538146689674,-0.457682757890626,-0.442149507405463,
                        -0.436333414340635,-0.436333414340635,-0.442149507405463,-0.457682757890626,-0.490538146689674,-0.297785386555755,
                        -0.233142845643366,-0.201961133587011,-0.192855113315383,-0.201961133587011,-0.233142845643366,-0.297785386555755,
                        -0.0257938136364344,0.0594175988703173,0.0964275566576916,0.0964275566576916,0.0594175988703172,-0.0257938136364344,
                        0.288675134594813,0.376915815470318,0.403922267174021,0.376915815470318,0.288675134594813,0.60314408282606,0.675292353048829,
                        0.675292353048829,0.60314408282606,0.875135655745381,0.915365515781251,0.875135655745381,1.0678884158793,1.0678884158793,
                        1.15470053837925])
        case 9:
            x=np.array([-1,-0.919533908166459,-0.738773865105505,-0.477924949810445,-0.165278957666387,0.165278957666387,0.477924949810444,
                        0.738773865105505,0.919533908166459,1,-0.959766954083229,-0.832767034381176,-0.612542527108829,-0.324242451702202,
                        -7.28583859910259e-17,0.324242451702202,0.612542527108829,0.832767034381176,0.959766954083229,-0.869386932552752,
                        -0.711339122354192,-0.464909794528113,-0.161526257671953,0.161526257671953,0.464909794528113,0.711339122354192,
                        0.869386932552752,-0.738962474905222,-0.562562654087565,-0.303161309390497,-1.54758400443078e-16,0.303161309390496,
                        0.562562654087565,0.738962474905222,-0.582639478833194,-0.399264054767869,-0.141635051718543,0.141635051718543,
                        0.399264054767869,0.582639478833194,-0.417360521166806,-0.238320202385363,6.24500451351651e-17,0.238320202385363,
                        0.417360521166806,-0.261037525094778,-0.0987965952453636,0.0987965952453636,0.261037525094778,-0.130613067447248,
                        -2.77555756156289e-17,0.130613067447248,-0.0402330459167706,0.0402330459167706,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.507664589518528,-0.480798271472218,
                        -0.467732074636234,-0.462389932774002,-0.461030418995941,-0.462389932774002,-0.467732074636234,-0.480798271472218,
                        -0.507664589518527,-0.351121800238572,-0.296611352056447,-0.268415795019699,-0.25680329882087,-0.25680329882087,
                        -0.268415795019699,-0.296611352056447,-0.351121800238572,-0.125220013043435,-0.0496072337724551,-0.0114841931117075,
                        -9.79459055823609e-17,-0.0114841931117075,-0.0496072337724552,-0.125220013043435,0.145539358544709,0.230515209497971,
                        0.268287491932578,0.268287491932577,0.230515209497971,0.145539358544709,0.431810910644917,0.511997166546457,
                        0.536831590039399,0.511997166546457,0.431810910644917,0.702570282233061,0.764343426692681,0.764343426692681,
                        0.702570282233061,0.928472069428198,0.961596542944437,0.928472069428198,1.08501485870815,1.08501485870815,1.15470053837925])
        case 10:
            x=np.array([-1,-0.934001430408059,-0.784483473663144,-0.565235326996205,-0.295758135586939,2.48332566105291e-16,0.295758135586939,
                        0.565235326996205,0.784483473663144,0.934001430408059,1,-0.96700071520403,-0.862490266934284,-0.67896301160953,
                        -0.433680361860317,-0.149060984504968,0.149060984504968,0.433680361860316,0.678963011609531,0.862490266934284,
                        0.96700071520403,-0.892241736831572,-0.761513858149685,-0.553994123851079,-0.291383340659998,2.04697370165263e-16,
                        0.291383340659998,0.553994123851078,0.761513858149684,0.892241736831572,-0.782617663498102,-0.635268772355334,
                        -0.413005093938368,-0.143113904251861,0.143113904251861,0.413005093938368,0.635268772355335,0.782617663498102,
                        -0.64787906779347,-0.491928523101933,-0.264597789333216,6.76542155630955e-17,0.264597789333216,0.491928523101933,
                        0.64787906779347,-0.5,-0.342867538596965,-0.12162175327837,0.12162175327837,0.342867538596965,0.5,-0.35212093220653,
                        -0.201588410495018,1.45716771982052e-16,0.201588410495018,0.35212093220653,-0.217382336501897,-0.0825508465401539,
                        0.0825508465401538,0.217382336501898,-0.107758263168428,3.7470027081099e-16,0.107758263168428,-0.0329992847959703,
                        0.0329992847959704,0])
            y=np.array([-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,
                        -0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.577350269189626,-0.52019383130957,
                        -0.497958987787941,-0.48732098446614,-0.483159719791923,-0.481969730940298,-0.481969730940298,-0.483159719791923,
                        -0.48732098446614,-0.497958987787941,-0.52019383130957,-0.390707482446531,-0.344338724050772,-0.319848656534891,
                        -0.308666954156585,-0.305531209797024,-0.308666954156585,-0.319848656534891,-0.344338724050772,-0.390707482446531,
                        -0.200833017700305,-0.1339983505975,-0.0980118981728412,-0.0826268511445903,-0.0826268511445904,-0.0980118981728415,
                        -0.1339983505975,-0.200833017700305,0.0325410758006012,0.111894266175728,0.152765604898512,0.165253702289181,
                        0.152765604898512,0.111894266175728,0.0325410758006009,0.288675134594813,0.37007546476457,0.406678852329426,
                        0.406678852329426,0.37007546476457,0.288675134594813,0.544809193389025,0.617158070389423,0.639697313069782,
                        0.617158070389423,0.544809193389025,0.77818328688993,0.831659708516912,0.831659708516912,0.778183286889931,
                        0.968057751636157,0.995917975575882,0.968057751636156,1.0975441004992,1.0975441004992,1.15470053837925])
        case _:
            x=np.array([0. , 0.])
            y=np.array([0. , 0.])

    x = x[:,np.newaxis]
    y = y[:,np.newaxis]
    return (x,y)

def xytors(x,y):
    # function [r,s] = xytors(x, y) 
    # # Purpose : From (x,y) in equilateral triangle to (r,s) coordinates 
    # # in standard triangle  

    L1 = (math.sqrt(3.0)*y+1.0)/3.0
    L2 = (-3.0*x - math.sqrt(3.0)*y + 2.0)/6.0
    L3 = ( 3.0*x - math.sqrt(3.0)*y + 2.0)/6.0
    r = -L2 + L3 - L1
    s = -L2 - L3 + L1
    return (r,s)

def rstoab(r,s):

    # function [a,b] = rstoab(r,s)
    # Purpose : Transfer from (r,s) -> (a,b) coordinates in triangle

    Np = len(r)
    a = np.zeros((Np,1))
    for n in range(Np):
        if (s[n] != 1):
            a[n] = 2*(1+r[n])/(1-s[n])-1
        else:
            a[n] = -1
    b = s
    return (a,b)

def rstoe(r,s,v1x, v1y, v2x, v2y, v3x, v3y):
    x = 0.5*(-(r+s)*v1x +(r+1)*v2x + (s+1)*v3x)
    y = 0.5*(-(r+s)*v1y +(r+1)*v2y + (s+1)*v3y)
    return(x,y)

def xytoab(xx,yy,v1x, v1y, v2x, v2y, v3x, v3y):
    v1x2, v1y2 = -1, -1 #-1, -0.577
    v2x2, v2y2 = 1, -1 #1, -0.577
    v3x2, v3y2 = -1, 1 #0, 1.15
    
    detT = (v1x * (v2y - v3y) + v2x * (v3y - v1y) + v3x * (v1y - v2y))

    # Coordenadas baricéntricas
    lambda1 = ((xx * (v2y - v3y) + v2x * (v3y - yy) + v3x * (yy - v2y)) / detT)
    lambda2 = ((xx * (v3y - v1y) + v3x * (v1y - yy) + v1x * (yy - v3y)) / detT)
    lambda3 = 1 - lambda1 - lambda2

    # Convertir las coordenadas baricéntricas al nuevo triángulo
    a = lambda1 * v1x2 + lambda2 * v2x2 + lambda3 * v3x2
    b = lambda1 * v1y2 + lambda2 * v2y2 + lambda3 * v3y2
    return(a,b)

def Nodes3D(PolyDeg):
    x={}
    y={}
    match PolyDeg:
        case 1:
            x=np.array([-1,1,0,0]) 
            y=np.array([-5.773503e-01,-5.773503e-01,1.154701e+00,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,1.224745e+00])

        case 2:
            x=np.array([-1,0,1,-5.000000e-01,5.000000e-01,0,-5.000000e-01,5.000000e-01,0,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,2.886751e-01,2.886751e-01,1.154701e+00,-2.886751e-01,-2.886751e-01,5.773503e-01,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,4.082483e-01,4.082483e-01,4.082483e-01,1.224745e+00])

        case 3:
            x=np.array([-1,-4.472136e-01,4.472136e-01,1,-7.236068e-01,-6.784696e-17,7.236068e-01,-2.763932e-01,2.763932e-01,0,-7.236068e-01,-6.784696e-17,7.236068e-01,-3.333333e-01,3.333333e-01,-5.204170e-17,-2.763932e-01,2.763932e-01,-1.387779e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-9.862320e-02,-1.068313e-17,-9.862320e-02,6.759735e-01,6.759735e-01,1.154701e+00,-4.177746e-01,-3.849002e-01,-4.177746e-01,1.924501e-01,1.924501e-01,8.355492e-01,-1.595757e-01,-1.595757e-01,3.191514e-01,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,4.309992e-02,1.360828e-01,4.309992e-02,1.360828e-01,1.360828e-01,4.309992e-02,7.733967e-01,7.733967e-01,7.733967e-01,1.224745e+00])

        case 4:
            x=np.array([-1,-6.546537e-01,3.165870e-17,6.546537e-01,1,-8.273268e-01,-3.273754e-01,3.273754e-01,8.273268e-01,-5.000000e-01,3.816392e-17,5.000000e-01,-1.726732e-01,1.726732e-01,0,-8.273268e-01,-3.273754e-01,3.273754e-01,8.273268e-01,-5.515836e-01,-1.370410e-33,5.515836e-01,-2.242082e-01,2.242082e-01,-2.081668e-17,-5.000000e-01,3.816392e-17,5.000000e-01,-2.242082e-01,2.242082e-01,4.622232e-33,-1.726732e-01,1.726732e-01,2.081668e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-2.782716e-01,-1.890103e-01,-1.890103e-01,-2.782716e-01,2.886751e-01,3.780205e-01,2.886751e-01,8.556218e-01,8.556218e-01,1.154701e+00,-4.776574e-01,-4.479036e-01,-4.479036e-01,-4.776574e-01,-5.956358e-02,-7.300063e-34,-5.956358e-02,5.074672e-01,5.074672e-01,9.553147e-01,-2.886751e-01,-2.588933e-01,-2.886751e-01,1.294467e-01,1.294467e-01,5.773503e-01,-9.969290e-02,-9.969290e-02,1.993858e-01,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-1.262742e-01,-4.211781e-02,-4.211781e-02,-1.262742e-01,-4.211781e-02,1.292035e-33,-4.211781e-02,-4.211781e-02,-4.211781e-02,-1.262742e-01,4.082483e-01,4.924839e-01,4.082483e-01,4.924839e-01,4.924839e-01,4.082483e-01,9.427708e-01,9.427708e-01,9.427708e-01,1.224745e+00])

        case 5:
            x=np.array([-1,-7.650553e-01,-2.852315e-01,2.852315e-01,7.650553e-01,1,-8.825277e-01,-5.328152e-01,5.204170e-17,5.328152e-01,8.825277e-01,-6.426158e-01,-2.513717e-01,2.513717e-01,6.426158e-01,-3.573842e-01,2.775558e-17,3.573842e-01,-1.174723e-01,1.174723e-01,0,-8.825277e-01,-5.328152e-01,5.204170e-17,5.328152e-01,8.825277e-01,-6.885435e-01,-2.446636e-01,2.446636e-01,6.885435e-01,-4.171239e-01,6.158268e-17,4.171239e-01,-1.557283e-01,1.557283e-01,0,-6.426158e-01,-2.513717e-01,2.513717e-01,6.426158e-01,-4.171239e-01,6.591949e-17,4.171239e-01,-1.657522e-01,1.657522e-01,-1.387779e-17,-3.573842e-01,2.775558e-17,3.573842e-01,-1.557283e-01,1.557283e-01,1.387779e-17,-1.174723e-01,1.174723e-01,4.163336e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-3.738822e-01,-3.076210e-01,-2.902590e-01,-3.076210e-01,-3.738822e-01,4.165740e-02,1.451295e-01,1.451295e-01,4.165740e-02,5.356929e-01,6.152420e-01,5.356929e-01,9.512325e-01,9.512325e-01,1.154701e+00,-5.095276e-01,-4.874405e-01,-4.816532e-01,-4.874405e-01,-5.095276e-01,-2.177112e-01,-1.412566e-01,-1.412566e-01,-2.177112e-01,2.408266e-01,2.825132e-01,2.408266e-01,7.051518e-01,7.051518e-01,1.019055e+00,-3.710144e-01,-3.365237e-01,-3.365237e-01,-3.710144e-01,-4.943245e-02,3.686287e-17,-4.943245e-02,3.859561e-01,3.859561e-01,7.420288e-01,-2.063359e-01,-1.798195e-01,-2.063359e-01,8.990976e-02,8.990976e-02,4.126718e-01,-6.782269e-02,-6.782269e-02,1.356454e-01,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-2.164168e-01,-1.539451e-01,-1.375761e-01,-1.539451e-01,-2.164168e-01,-1.539451e-01,-9.988351e-02,-9.988351e-02,-1.539451e-01,-1.375761e-01,-9.988351e-02,-1.375761e-01,-1.539451e-01,-1.539451e-01,-2.164168e-01,1.753577e-01,2.729122e-01,2.729122e-01,1.753577e-01,2.729122e-01,2.996505e-01,2.729122e-01,2.729122e-01,2.729122e-01,1.753577e-01,6.411388e-01,7.161385e-01,6.411388e-01,7.161385e-01,7.161385e-01,6.411388e-01,1.032913e+00,1.032913e+00,1.032913e+00,1.224745e+00])

        case 6:
            x=np.array([-1,-8.302239e-01,-4.688488e-01,-4.402417e-17,4.688488e-01,8.302239e-01,1,-9.151119e-01,-6.604344e-01,-2.399327e-01,2.399327e-01,6.604344e-01,9.151119e-01,-7.344244e-01,-4.390146e-01,-7.726554e-17,4.390146e-01,7.344244e-01,-5.000000e-01,-1.990820e-01,1.990820e-01,5.000000e-01,-2.655756e-01,-1.457168e-16,2.655756e-01,-8.488805e-02,8.488805e-02,0,-9.151119e-01,-6.604344e-01,-2.399327e-01,2.399327e-01,6.604344e-01,9.151119e-01,-7.736229e-01,-4.216056e-01,-1.733639e-16,4.216056e-01,7.736229e-01,-5.596491e-01,-1.941725e-01,1.941725e-01,5.596491e-01,-3.197164e-01,-9.367507e-17,3.197164e-01,-1.131885e-01,1.131885e-01,-2.775558e-17,-7.344244e-01,-4.390146e-01,-7.726554e-17,4.390146e-01,7.344244e-01,-5.596491e-01,-1.941725e-01,1.941725e-01,5.596491e-01,-3.333333e-01,-1.032160e-16,3.333333e-01,-1.206345e-01,1.206345e-01,-4.163336e-17,-5.000000e-01,-1.990820e-01,1.990820e-01,5.000000e-01,-3.197164e-01,-9.020562e-17,3.197164e-01,-1.206345e-01,1.206345e-01,-7.703720e-33,-2.655756e-01,-1.457168e-16,2.655756e-01,-1.131885e-01,1.131885e-01,6.938894e-18,-8.488805e-02,8.488805e-02,2.775558e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-4.303199e-01,-3.813020e-01,-3.684053e-01,-3.684053e-01,-3.813020e-01,-4.303199e-01,-1.173598e-01,-2.358515e-02,-1.255990e-17,-2.358515e-02,-1.173598e-01,2.886751e-01,3.919904e-01,3.919904e-01,2.886751e-01,6.947101e-01,7.626039e-01,6.947101e-01,1.007670e+00,1.007670e+00,1.154701e+00,-5.283401e-01,-5.120008e-01,-5.077019e-01,-5.077019e-01,-5.120008e-01,-5.283401e-01,-3.159525e-01,-2.434141e-01,-2.242111e-01,-2.434141e-01,-3.159525e-01,4.606318e-02,1.121056e-01,1.121056e-01,4.606318e-02,4.616387e-01,4.868282e-01,4.616387e-01,8.279534e-01,8.279534e-01,1.056680e+00,-4.240201e-01,-3.927619e-01,-3.849002e-01,-3.927619e-01,-4.240201e-01,-1.838169e-01,-1.121056e-01,-1.121056e-01,-1.838169e-01,1.924501e-01,2.242111e-01,1.924501e-01,5.765788e-01,5.765788e-01,8.480402e-01,-2.886751e-01,-2.542367e-01,-2.542367e-01,-2.886751e-01,-4.529170e-02,-7.025630e-17,-4.529170e-02,2.995284e-01,2.995284e-01,5.773503e-01,-1.533301e-01,-1.306989e-01,-1.533301e-01,6.534943e-02,6.534943e-02,3.066603e-01,-4.901014e-02,-4.901014e-02,9.802028e-02,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-2.696267e-01,-2.234122e-01,-2.112530e-01,-2.112530e-01,-2.234122e-01,-2.696267e-01,-2.234122e-01,-1.721198e-01,-1.585412e-01,-1.721198e-01,-2.234122e-01,-2.112530e-01,-1.585412e-01,-1.585412e-01,-2.112530e-01,-2.112530e-01,-1.721198e-01,-2.112530e-01,-2.234122e-01,-2.234122e-01,-2.696267e-01,2.543485e-02,1.138465e-01,1.360828e-01,1.138465e-01,2.543485e-02,1.138465e-01,1.585412e-01,1.585412e-01,1.138465e-01,1.360828e-01,1.585412e-01,1.360828e-01,1.138465e-01,1.138465e-01,2.543485e-02,4.082483e-01,5.056549e-01,5.056549e-01,4.082483e-01,5.056549e-01,5.163593e-01,5.056549e-01,5.056549e-01,5.056549e-01,4.082483e-01,7.910617e-01,8.550727e-01,7.910617e-01,8.550727e-01,8.550727e-01,7.910617e-01,1.086123e+00,1.086123e+00,1.086123e+00,1.224745e+00])

        case 7:
            x=np.array([-1,-8.717401e-01,-5.917002e-01,-2.092992e-01,2.092992e-01,5.917002e-01,8.717401e-01,1,-9.358701e-01,-7.379257e-01,-4.055610e-01,-2.046974e-16,4.055610e-01,7.379257e-01,9.358701e-01,-7.958501e-01,-5.578050e-01,-2.000072e-01,2.000072e-01,5.578050e-01,7.958501e-01,-6.046496e-01,-3.515626e-01,-5.898060e-17,3.515626e-01,6.046496e-01,-3.953504e-01,-1.522440e-01,1.522440e-01,3.953504e-01,-2.041499e-01,-3.469447e-17,2.041499e-01,-6.412993e-02,6.412993e-02,0,-9.358701e-01,-7.379257e-01,-4.055610e-01,-2.046974e-16,4.055610e-01,7.379257e-01,9.358701e-01,-8.252838e-01,-5.393958e-01,-1.924131e-01,1.924131e-01,5.393958e-01,8.252838e-01,-6.544553e-01,-3.441610e-01,-7.502679e-17,3.441610e-01,6.544553e-01,-4.505209e-01,-1.517479e-01,1.517479e-01,4.505209e-01,-2.488943e-01,-6.505213e-17,2.488943e-01,-8.735809e-02,8.735809e-02,-4.857226e-17,-7.958501e-01,-5.578050e-01,-2.000072e-01,2.000072e-01,5.578050e-01,7.958501e-01,-6.544553e-01,-3.441610e-01,-7.567731e-17,3.441610e-01,6.544553e-01,-4.666714e-01,-1.558040e-01,1.558040e-01,4.666714e-01,-2.666643e-01,-5.204170e-17,2.666643e-01,-9.665035e-02,9.665035e-02,-2.775558e-17,-6.046496e-01,-3.515626e-01,-5.898060e-17,3.515626e-01,6.046496e-01,-4.505209e-01,-1.517479e-01,1.517479e-01,4.505209e-01,-2.666643e-01,-4.683753e-17,2.666643e-01,-9.895830e-02,9.895830e-02,-3.122502e-17,-3.953504e-01,-1.522440e-01,1.522440e-01,3.953504e-01,-2.488943e-01,-6.591949e-17,2.488943e-01,-9.665035e-02,9.665035e-02,-1.040834e-17,-2.041499e-01,-3.469447e-17,2.041499e-01,-8.735809e-02,8.735809e-02,2.775558e-17,-6.412993e-02,6.412993e-02,6.938894e-18,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-4.662740e-01,-4.260416e-01,-4.099470e-01,-4.059495e-01,-4.099470e-01,-4.260416e-01,-4.662740e-01,-2.237523e-01,-1.462527e-01,-1.154742e-01,-1.154742e-01,-1.462527e-01,-2.237523e-01,1.074167e-01,2.029747e-01,2.309484e-01,2.029747e-01,1.074167e-01,4.699336e-01,5.561996e-01,5.561996e-01,4.699336e-01,8.011025e-01,8.520832e-01,8.011025e-01,1.043624e+00,1.043624e+00,1.154701e+00,-5.403248e-01,-5.269141e-01,-5.215492e-01,-5.202167e-01,-5.215492e-01,-5.269141e-01,-5.403248e-01,-3.756054e-01,-3.114203e-01,-2.863131e-01,-2.863131e-01,-3.114203e-01,-3.756054e-01,-9.045157e-02,-2.347809e-02,-7.806256e-17,-2.347809e-02,-9.045157e-02,2.601083e-01,3.097912e-01,3.097912e-01,2.601083e-01,6.120007e-01,6.228406e-01,6.120007e-01,9.025194e-01,9.025194e-01,1.080650e+00,-4.594843e-01,-4.336511e-01,-4.233916e-01,-4.233916e-01,-4.336511e-01,-4.594843e-01,-2.662478e-01,-1.987014e-01,-1.799069e-01,-1.987014e-01,-2.662478e-01,3.848450e-02,8.995346e-02,8.995346e-02,3.848450e-02,3.849071e-01,3.974029e-01,3.849071e-01,6.998988e-01,6.998988e-01,9.189685e-01,-3.490946e-01,-3.172419e-01,-3.079174e-01,-3.172419e-01,-3.490946e-01,-1.458411e-01,-8.761167e-02,-8.761167e-02,-1.458411e-01,1.539587e-01,1.752233e-01,1.539587e-01,4.630831e-01,4.630831e-01,6.981892e-01,-2.282557e-01,-1.995003e-01,-1.995003e-01,-2.282557e-01,-3.209699e-02,-4.683753e-17,-3.209699e-02,2.315973e-01,2.315973e-01,4.565113e-01,-1.178660e-01,-1.008724e-01,-1.178660e-01,5.043622e-02,5.043622e-02,2.357320e-01,-3.702543e-02,-3.702543e-02,7.405086e-02,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-3.035246e-01,-2.655931e-01,-2.504189e-01,-2.466501e-01,-2.504189e-01,-2.655931e-01,-3.035246e-01,-2.655931e-01,-2.202074e-01,-2.024539e-01,-2.024539e-01,-2.202074e-01,-2.655931e-01,-2.504189e-01,-2.024539e-01,-1.908201e-01,-2.024539e-01,-2.504189e-01,-2.466501e-01,-2.024539e-01,-2.024539e-01,-2.466501e-01,-2.504189e-01,-2.202074e-01,-2.504189e-01,-2.655931e-01,-2.655931e-01,-3.035246e-01,-7.487288e-02,-1.805576e-03,2.721265e-02,2.721265e-02,-1.805576e-03,-7.487288e-02,-1.805576e-03,4.534929e-02,6.360670e-02,4.534929e-02,-1.805576e-03,2.721265e-02,6.360670e-02,6.360670e-02,2.721265e-02,2.721265e-02,4.534929e-02,2.721265e-02,-1.805576e-03,-1.805576e-03,-7.487288e-02,2.373562e-01,3.274492e-01,3.538230e-01,3.274492e-01,2.373562e-01,3.274492e-01,3.595586e-01,3.595586e-01,3.274492e-01,3.538230e-01,3.595586e-01,3.538230e-01,3.274492e-01,3.274492e-01,2.373562e-01,5.791404e-01,6.604728e-01,6.604728e-01,5.791404e-01,6.604728e-01,6.606222e-01,6.604728e-01,6.604728e-01,6.604728e-01,5.791404e-01,8.913695e-01,9.394345e-01,8.913695e-01,9.394345e-01,9.394345e-01,8.913695e-01,1.120021e+00,1.120021e+00,1.120021e+00,1.224745e+00])

        case 8:
            x=np.array([-1,-8.997580e-01,-6.771863e-01,-3.631175e-01,3.005759e-17,3.631175e-01,6.771863e-01,8.997580e-01,1,-9.498790e-01,-7.925642e-01,-5.243183e-01,-1.832405e-01,1.832405e-01,5.243183e-01,7.925642e-01,9.498790e-01,-8.385931e-01,-6.447037e-01,-3.494405e-01,-1.040834e-17,3.494405e-01,6.447037e-01,8.385931e-01,-6.815587e-01,-4.689148e-01,-1.667066e-01,1.667066e-01,4.689148e-01,6.815587e-01,-5.000000e-01,-2.856742e-01,7.632783e-17,2.856742e-01,5.000000e-01,-3.184413e-01,-1.203854e-01,1.203854e-01,3.184413e-01,-1.614069e-01,5.551115e-17,1.614069e-01,-5.012100e-02,5.012100e-02,0,-9.498790e-01,-7.925642e-01,-5.243183e-01,-1.832405e-01,1.832405e-01,5.243183e-01,7.925642e-01,9.498790e-01,-8.617095e-01,-6.252883e-01,-3.383615e-01,6.830474e-18,3.383615e-01,6.252883e-01,8.617095e-01,-7.230073e-01,-4.589624e-01,-1.605700e-01,1.605700e-01,4.589624e-01,7.230073e-01,-5.507184e-01,-2.838068e-01,7.806256e-18,2.838068e-01,5.507184e-01,-3.674779e-01,-1.206009e-01,1.206009e-01,3.674779e-01,-1.986891e-01,2.602085e-17,1.986891e-01,-6.914525e-02,6.914525e-02,-2.081668e-17,-8.385931e-01,-6.447037e-01,-3.494405e-01,-1.040834e-17,3.494405e-01,6.447037e-01,8.385931e-01,-7.230073e-01,-4.589624e-01,-1.605700e-01,1.605700e-01,4.589624e-01,7.230073e-01,-5.662937e-01,-2.879877e-01,-1.504948e-33,2.879877e-01,5.662937e-01,-3.889022e-01,-1.274177e-01,1.274177e-01,3.889022e-01,-2.168532e-01,9.540979e-18,2.168532e-01,-7.830363e-02,7.830363e-02,-2.775558e-17,-6.815587e-01,-4.689148e-01,-1.667066e-01,1.667066e-01,4.689148e-01,6.815587e-01,-5.507184e-01,-2.838068e-01,7.372575e-18,2.838068e-01,5.507184e-01,-3.889022e-01,-1.274177e-01,1.274177e-01,3.889022e-01,-2.221956e-01,6.505213e-18,2.221956e-01,-8.180366e-02,8.180366e-02,-2.081668e-17,-5.000000e-01,-2.856742e-01,7.632783e-17,2.856742e-01,5.000000e-01,-3.674779e-01,-1.206009e-01,1.206009e-01,3.674779e-01,-2.168532e-01,1.214306e-17,2.168532e-01,-8.180366e-02,8.180366e-02,4.622232e-33,-3.184413e-01,-1.203854e-01,1.203854e-01,3.184413e-01,-1.986891e-01,2.775558e-17,1.986891e-01,-7.830363e-02,7.830363e-02,2.081668e-17,-1.614069e-01,5.551115e-17,1.614069e-01,-6.914525e-02,6.914525e-02,2.775558e-17,-5.012100e-02,5.012100e-02,2.081668e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-4.905381e-01,-4.575872e-01,-4.417244e-01,-4.356622e-01,-4.356622e-01,-4.417244e-01,-4.575872e-01,-4.905381e-01,-2.977854e-01,-2.332107e-01,-2.017496e-01,-1.924962e-01,-2.017496e-01,-2.332107e-01,-2.977854e-01,-2.579381e-02,5.914012e-02,9.624808e-02,9.624808e-02,5.914012e-02,-2.579381e-02,2.886751e-01,3.765221e-01,4.034991e-01,3.765221e-01,2.886751e-01,6.031441e-01,6.749351e-01,6.749351e-01,6.031441e-01,8.751357e-01,9.151744e-01,8.751357e-01,1.067888e+00,1.067888e+00,1.154701e+00,-5.484129e-01,-5.374292e-01,-5.321416e-01,-5.301209e-01,-5.301209e-01,-5.321416e-01,-5.374292e-01,-5.484129e-01,-4.176661e-01,-3.610104e-01,-3.346110e-01,-3.277119e-01,-3.346110e-01,-3.610104e-01,-4.176661e-01,-1.880021e-01,-1.257241e-01,-9.270514e-02,-9.270514e-02,-1.257241e-01,-1.880021e-01,1.063695e-01,1.638560e-01,1.854103e-01,1.638560e-01,1.063695e-01,4.237514e-01,4.603352e-01,4.603352e-01,4.237514e-01,7.201438e-01,7.220207e-01,7.201438e-01,9.550954e-01,9.550954e-01,1.096826e+00,-4.841620e-01,-4.626371e-01,-4.521500e-01,-4.490656e-01,-4.521500e-01,-4.626371e-01,-4.841620e-01,-3.270112e-01,-2.649821e-01,-2.398344e-01,-2.398344e-01,-2.649821e-01,-3.270112e-01,-7.654932e-02,-1.914050e-02,-8.016739e-34,-1.914050e-02,-7.654932e-02,2.245328e-01,2.589749e-01,2.589749e-01,2.245328e-01,5.286994e-01,5.299641e-01,5.286994e-01,7.896483e-01,7.896483e-01,9.683239e-01,-3.934981e-01,-3.651868e-01,-3.528175e-01,-3.528175e-01,-3.651868e-01,-3.934981e-01,-2.234987e-01,-1.638560e-01,-1.471293e-01,-1.638560e-01,-2.234987e-01,3.203662e-02,7.356464e-02,7.356464e-02,3.203662e-02,3.207809e-01,3.277119e-01,3.207809e-01,5.886855e-01,5.886855e-01,7.869962e-01,-2.886751e-01,-2.593928e-01,-2.504005e-01,-2.593928e-01,-2.886751e-01,-1.177047e-01,-6.962896e-02,-6.962896e-02,-1.177047e-01,1.252002e-01,1.392579e-01,1.252002e-01,3.770976e-01,3.770976e-01,5.773503e-01,-1.838522e-01,-1.599218e-01,-1.599218e-01,-1.838522e-01,-2.429594e-02,4.510281e-17,-2.429594e-02,1.842177e-01,1.842177e-01,3.677043e-01,-9.318829e-02,-7.984206e-02,-9.318829e-02,3.992103e-02,3.992103e-02,1.863766e-01,-2.893737e-02,-2.893737e-02,5.787475e-02,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-3.264010e-01,-2.953346e-01,-2.803790e-01,-2.746635e-01,-2.746635e-01,-2.803790e-01,-2.953346e-01,-3.264010e-01,-2.953346e-01,-2.552729e-01,-2.366057e-01,-2.317273e-01,-2.366057e-01,-2.552729e-01,-2.953346e-01,-2.803790e-01,-2.366057e-01,-2.216066e-01,-2.216066e-01,-2.366057e-01,-2.803790e-01,-2.746635e-01,-2.317273e-01,-2.216066e-01,-2.317273e-01,-2.746635e-01,-2.746635e-01,-2.366057e-01,-2.366057e-01,-2.746635e-01,-2.803790e-01,-2.552729e-01,-2.803790e-01,-2.953346e-01,-2.953346e-01,-3.264010e-01,-1.446720e-01,-8.379042e-02,-5.412854e-02,-4.540436e-02,-5.412854e-02,-8.379042e-02,-1.446720e-01,-8.379042e-02,-3.966528e-02,-1.353438e-02,-1.353438e-02,-3.966528e-02,-8.379042e-02,-5.412854e-02,-1.353438e-02,1.418879e-33,-1.353438e-02,-5.412854e-02,-4.540436e-02,-1.353438e-02,-1.353438e-02,-4.540436e-02,-5.412854e-02,-3.966528e-02,-5.412854e-02,-8.379042e-02,-8.379042e-02,-1.446720e-01,1.117641e-01,1.918406e-01,2.268263e-01,2.268263e-01,1.918406e-01,1.117641e-01,1.918406e-01,2.317273e-01,2.486754e-01,2.317273e-01,1.918406e-01,2.268263e-01,2.486754e-01,2.486754e-01,2.268263e-01,2.268263e-01,2.317273e-01,2.268263e-01,1.918406e-01,1.918406e-01,1.117641e-01,4.082483e-01,4.910712e-01,5.165054e-01,4.910712e-01,4.082483e-01,4.910712e-01,5.128767e-01,5.128767e-01,4.910712e-01,5.165054e-01,5.128767e-01,5.165054e-01,4.910712e-01,4.910712e-01,4.082483e-01,7.047325e-01,7.724177e-01,7.724177e-01,7.047325e-01,7.724177e-01,7.658186e-01,7.724177e-01,7.724177e-01,7.724177e-01,7.047325e-01,9.611686e-01,9.989174e-01,9.611686e-01,9.989174e-01,9.989174e-01,9.611686e-01,1.142898e+00,1.142898e+00,1.142898e+00,1.224745e+00])

        case 9:
            x=np.array([-1,-9.195339e-01,-7.387739e-01,-4.779249e-01,-1.652790e-01,1.652790e-01,4.779249e-01,7.387739e-01,9.195339e-01,1,-9.597670e-01,-8.317319e-01,-6.113517e-01,-3.234951e-01,-1.318390e-16,3.234951e-01,6.113517e-01,8.317319e-01,9.597670e-01,-8.693869e-01,-7.083096e-01,-4.618372e-01,-1.602884e-01,1.602884e-01,4.618372e-01,7.083096e-01,8.693869e-01,-7.389625e-01,-5.579732e-01,-2.994424e-01,-7.539794e-17,2.994424e-01,5.579732e-01,7.389625e-01,-5.826395e-01,-3.943479e-01,-1.391540e-01,1.391540e-01,3.943479e-01,5.826395e-01,-4.173605e-01,-2.344782e-01,-1.387779e-17,2.344782e-01,4.173605e-01,-2.610375e-01,-9.695787e-02,9.695787e-02,2.610375e-01,-1.306131e-01,1.873501e-16,1.306131e-01,-4.023305e-02,4.023305e-02,0,-9.597670e-01,-8.317319e-01,-6.113517e-01,-3.234951e-01,-1.318390e-16,3.234951e-01,6.113517e-01,8.317319e-01,9.597670e-01,-8.878213e-01,-6.887314e-01,-4.496245e-01,-1.567123e-01,1.567123e-01,4.496245e-01,6.887314e-01,8.878213e-01,-7.732204e-01,-5.465003e-01,-2.893221e-01,-8.348357e-17,2.893221e-01,5.465003e-01,7.732204e-01,-6.271561e-01,-3.915433e-01,-1.354062e-01,1.354062e-01,3.915433e-01,6.271561e-01,-4.647826e-01,-2.348311e-01,-6.722053e-17,2.348311e-01,4.647826e-01,-3.036610e-01,-9.687578e-02,9.687578e-02,3.036610e-01,-1.618687e-01,1.387779e-17,1.618687e-01,-5.608936e-02,5.608936e-02,-3.469447e-17,-8.693869e-01,-7.083096e-01,-4.618372e-01,-1.602884e-01,1.602884e-01,4.618372e-01,7.083096e-01,8.693869e-01,-7.732204e-01,-5.465003e-01,-2.893221e-01,-8.505566e-17,2.893221e-01,5.465003e-01,7.732204e-01,-6.412248e-01,-3.944735e-01,-1.357550e-01,1.357550e-01,3.944735e-01,6.412248e-01,-4.865769e-01,-2.432448e-01,-5.963112e-17,2.432448e-01,4.865769e-01,-3.262885e-01,-1.051514e-01,1.051514e-01,3.262885e-01,-1.793876e-01,3.469447e-18,1.793876e-01,-6.491085e-02,6.491085e-02,-2.775558e-17,-7.389625e-01,-5.579732e-01,-2.994424e-01,-7.539794e-17,2.994424e-01,5.579732e-01,7.389625e-01,-6.271561e-01,-3.915433e-01,-1.354062e-01,1.354062e-01,3.915433e-01,6.271561e-01,-4.865769e-01,-2.432448e-01,-6.245005e-17,2.432448e-01,4.865769e-01,-3.333333e-01,-1.078387e-01,1.078387e-01,3.333333e-01,-1.871345e-01,-4.922278e-17,1.871345e-01,-6.918287e-02,6.918287e-02,-3.469447e-17,-5.826395e-01,-3.943479e-01,-1.391540e-01,1.391540e-01,3.943479e-01,5.826395e-01,-4.647826e-01,-2.348311e-01,-7.025630e-17,2.348311e-01,4.647826e-01,-3.262885e-01,-1.051514e-01,1.051514e-01,3.262885e-01,-1.871345e-01,-4.510281e-17,1.871345e-01,-7.043476e-02,7.043476e-02,-8.673617e-18,-4.173605e-01,-2.344782e-01,-1.387779e-17,2.344782e-01,4.173605e-01,-3.036610e-01,-9.687578e-02,9.687578e-02,3.036610e-01,-1.793876e-01,3.469447e-18,1.793876e-01,-6.918287e-02,6.918287e-02,8.673617e-18,-2.610375e-01,-9.695787e-02,9.695787e-02,2.610375e-01,-1.618687e-01,0,1.618687e-01,-6.491085e-02,6.491085e-02,6.938894e-18,-1.306131e-01,1.873501e-16,1.306131e-01,-5.608936e-02,5.608936e-02,2.775558e-17,-4.023305e-02,4.023305e-02,6.938894e-18,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.076646e-01,-4.802007e-01,-4.649214e-01,-4.575220e-01,-4.553537e-01,-4.575220e-01,-4.649214e-01,-4.802007e-01,-5.076646e-01,-3.511218e-01,-2.969854e-01,-2.666418e-01,-2.532238e-01,-2.532238e-01,-2.666418e-01,-2.969854e-01,-3.511218e-01,-1.252200e-01,-5.139392e-02,-1.220194e-02,-1.420014e-17,-1.220194e-02,-5.139392e-02,-1.252200e-01,1.455394e-01,2.276768e-01,2.654257e-01,2.654257e-01,2.276768e-01,1.455394e-01,4.318109e-01,5.089159e-01,5.332836e-01,5.089159e-01,4.318109e-01,7.025703e-01,7.619068e-01,7.619068e-01,7.025703e-01,9.284721e-01,9.604013e-01,9.284721e-01,1.085015e+00,1.085015e+00,1.154701e+00,-5.541217e-01,-5.449671e-01,-5.398740e-01,-5.374075e-01,-5.366847e-01,-5.374075e-01,-5.398740e-01,-5.449671e-01,-5.541217e-01,-4.478174e-01,-3.976393e-01,-3.714533e-01,-3.616374e-01,-3.616374e-01,-3.714533e-01,-3.976393e-01,-4.478174e-01,-2.595091e-01,-2.036596e-01,-1.670402e-01,-1.563536e-01,-1.670402e-01,-2.036596e-01,-2.595091e-01,-1.145117e-02,4.510190e-02,7.817678e-02,7.817678e-02,4.510190e-02,-1.145117e-02,2.683424e-01,3.165355e-01,3.340803e-01,3.165355e-01,2.683424e-01,5.488587e-01,5.751129e-01,5.751129e-01,5.488587e-01,7.993831e-01,7.952786e-01,7.993831e-01,9.927845e-01,9.927845e-01,1.108243e+00,-5.019408e-01,-4.838953e-01,-4.737808e-01,-4.693081e-01,-4.693081e-01,-4.737808e-01,-4.838953e-01,-5.019408e-01,-3.714664e-01,-3.155221e-01,-2.884586e-01,-2.808749e-01,-2.884586e-01,-3.155221e-01,-3.714664e-01,-1.630723e-01,-1.063310e-01,-7.837821e-02,-7.837821e-02,-1.063310e-01,-1.630723e-01,9.584022e-02,1.404375e-01,1.567564e-01,1.404375e-01,9.584022e-02,3.734679e-01,3.947895e-01,3.947895e-01,3.734679e-01,6.368531e-01,6.310441e-01,6.368531e-01,8.553617e-01,8.553617e-01,1.003882e+00,-4.266402e-01,-4.020315e-01,-3.889675e-01,-3.849002e-01,-3.889675e-01,-4.020315e-01,-4.266402e-01,-2.822032e-01,-2.260576e-01,-2.026982e-01,-2.026982e-01,-2.260576e-01,-2.822032e-01,-6.484100e-02,-1.591608e-02,-6.028164e-17,-1.591608e-02,-6.484100e-02,1.924501e-01,2.186143e-01,2.186143e-01,1.924501e-01,4.538085e-01,4.521153e-01,4.538085e-01,6.842347e-01,6.842347e-01,8.532804e-01,-3.363871e-01,-3.090079e-01,-2.964249e-01,-2.964249e-01,-3.090079e-01,-3.363871e-01,-1.870113e-01,-1.355798e-01,-1.214184e-01,-1.355798e-01,-1.870113e-01,2.770155e-02,6.070921e-02,6.070921e-02,2.770155e-02,2.687234e-01,2.711595e-01,2.687234e-01,4.960192e-01,4.960192e-01,6.727741e-01,-2.409632e-01,-2.152615e-01,-2.071390e-01,-2.152615e-01,-2.409632e-01,-9.543328e-02,-5.593126e-02,-5.593126e-02,-9.543328e-02,1.035695e-01,1.118625e-01,1.035695e-01,3.106948e-01,3.106948e-01,4.819264e-01,-1.507101e-01,-1.309312e-01,-1.309312e-01,-1.507101e-01,-1.850235e-02,4.683753e-17,-1.850235e-02,1.494336e-01,1.494336e-01,3.014202e-01,-7.540949e-02,-6.476641e-02,-7.540949e-02,3.238320e-02,3.238320e-02,1.508190e-01,-2.322856e-02,-2.322856e-02,4.645712e-02,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-3.425480e-01,-3.166548e-01,-3.022493e-01,-2.952731e-01,-2.932288e-01,-2.952731e-01,-3.022493e-01,-3.166548e-01,-3.425480e-01,-3.166548e-01,-2.811734e-01,-2.626572e-01,-2.557163e-01,-2.557163e-01,-2.626572e-01,-2.811734e-01,-3.166548e-01,-3.022493e-01,-2.626572e-01,-2.468989e-01,-2.426335e-01,-2.468989e-01,-2.626572e-01,-3.022493e-01,-2.952731e-01,-2.557163e-01,-2.426335e-01,-2.426335e-01,-2.557163e-01,-2.952731e-01,-2.932288e-01,-2.557163e-01,-2.468989e-01,-2.557163e-01,-2.932288e-01,-2.952731e-01,-2.626572e-01,-2.626572e-01,-2.952731e-01,-3.022493e-01,-2.811734e-01,-3.022493e-01,-3.166548e-01,-3.166548e-01,-3.425480e-01,-1.949580e-01,-1.439178e-01,-1.153096e-01,-1.026589e-01,-1.026589e-01,-1.153096e-01,-1.439178e-01,-1.949580e-01,-1.439178e-01,-1.044597e-01,-7.518734e-02,-6.653370e-02,-7.518734e-02,-1.044597e-01,-1.439178e-01,-1.153096e-01,-7.518734e-02,-5.542177e-02,-5.542177e-02,-7.518734e-02,-1.153096e-01,-1.026589e-01,-6.653370e-02,-5.542177e-02,-6.653370e-02,-1.026589e-01,-1.026589e-01,-7.518734e-02,-7.518734e-02,-1.026589e-01,-1.153096e-01,-1.044597e-01,-1.153096e-01,-1.439178e-01,-1.439178e-01,-1.949580e-01,1.802420e-02,8.762811e-02,1.245787e-01,1.360828e-01,1.245787e-01,8.762811e-02,1.802420e-02,8.762811e-02,1.277612e-01,1.545836e-01,1.545836e-01,1.277612e-01,8.762811e-02,1.245787e-01,1.545836e-01,1.662653e-01,1.545836e-01,1.245787e-01,1.360828e-01,1.545836e-01,1.545836e-01,1.360828e-01,1.245787e-01,1.277612e-01,1.245787e-01,8.762811e-02,8.762811e-02,1.802420e-02,2.732986e-01,3.507386e-01,3.863285e-01,3.863285e-01,3.507386e-01,2.732986e-01,3.507386e-01,3.836713e-01,3.972736e-01,3.836713e-01,3.507386e-01,3.863285e-01,3.972736e-01,3.972736e-01,3.863285e-01,3.863285e-01,3.836713e-01,3.863285e-01,3.507386e-01,3.507386e-01,2.732986e-01,5.431980e-01,6.158933e-01,6.388674e-01,6.158933e-01,5.431980e-01,6.158933e-01,6.297740e-01,6.297740e-01,6.158933e-01,6.388674e-01,6.297740e-01,6.388674e-01,6.158933e-01,6.158933e-01,5.431980e-01,7.984724e-01,8.544154e-01,8.544154e-01,7.984724e-01,8.544154e-01,8.435203e-01,8.544154e-01,8.544154e-01,8.544154e-01,7.984724e-01,1.011455e+00,1.041558e+00,1.011455e+00,1.041558e+00,1.041558e+00,1.011455e+00,1.159045e+00,1.159045e+00,1.159045e+00,1.224745e+00])

        case 10:
            x=np.array([-1,-9.340014e-01,-7.844835e-01,-5.652353e-01,-2.957581e-01,-2.483326e-16,2.957581e-01,5.652353e-01,7.844835e-01,9.340014e-01,1,-9.670007e-01,-8.609493e-01,-6.770290e-01,-4.321840e-01,-1.485059e-01,1.485059e-01,4.321840e-01,6.770290e-01,8.609493e-01,9.670007e-01,-8.922417e-01,-7.567745e-01,-5.485043e-01,-2.879239e-01,-1.665335e-16,2.879239e-01,5.485043e-01,7.567745e-01,8.922417e-01,-7.826177e-01,-6.275692e-01,-4.052010e-01,-1.399711e-01,1.399711e-01,4.052010e-01,6.275692e-01,7.826177e-01,-6.478791e-01,-4.827518e-01,-2.571743e-01,-1.908196e-17,2.571743e-01,4.827518e-01,6.478791e-01,-5.000000e-01,-3.342459e-01,-1.172771e-01,1.172771e-01,3.342459e-01,5.000000e-01,-3.521209e-01,-1.953852e-01,-4.857226e-17,1.953852e-01,3.521209e-01,-2.173823e-01,-7.974554e-02,7.974554e-02,2.173823e-01,-1.077583e-01,-9.714451e-17,1.077583e-01,-3.299928e-02,3.299928e-02,0,-9.670007e-01,-8.609493e-01,-6.770290e-01,-4.321840e-01,-1.485059e-01,1.485059e-01,4.321840e-01,6.770290e-01,8.609493e-01,9.670007e-01,-9.072995e-01,-7.371910e-01,-5.360138e-01,-2.831732e-01,-2.424276e-16,2.831732e-01,5.360138e-01,7.371910e-01,9.072995e-01,-8.112678e-01,-6.148077e-01,-3.925175e-01,-1.353930e-01,1.353930e-01,3.925175e-01,6.148077e-01,8.112678e-01,-6.865844e-01,-4.788724e-01,-2.502905e-01,-9.432559e-17,2.502905e-01,4.788724e-01,6.865844e-01,-5.437526e-01,-3.345651e-01,-1.148974e-01,1.148974e-01,3.345651e-01,5.437526e-01,-3.952467e-01,-1.956992e-01,-7.112366e-17,1.956992e-01,3.952467e-01,-2.544004e-01,-7.879390e-02,7.879390e-02,2.544004e-01,-1.342388e-01,-4.163336e-17,1.342388e-01,-4.635024e-02,4.635024e-02,-2.081668e-17,-8.922417e-01,-7.567745e-01,-5.485043e-01,-2.879239e-01,-1.665335e-16,2.879239e-01,5.485043e-01,7.567745e-01,8.922417e-01,-8.112678e-01,-6.148077e-01,-3.925175e-01,-1.353930e-01,1.353930e-01,3.925175e-01,6.148077e-01,8.112678e-01,-6.990028e-01,-4.801364e-01,-2.499100e-01,-5.442695e-17,2.499100e-01,4.801364e-01,6.990028e-01,-5.643750e-01,-3.421026e-01,-1.165601e-01,1.165601e-01,3.421026e-01,5.643750e-01,-4.190581e-01,-2.067096e-01,2.255141e-17,2.067096e-01,4.190581e-01,-2.764510e-01,-8.761895e-02,8.761895e-02,2.764510e-01,-1.504986e-01,-1.214306e-17,1.504986e-01,-5.449331e-02,5.449331e-02,-6.938894e-18,-7.826177e-01,-6.275692e-01,-4.052010e-01,-1.399711e-01,1.399711e-01,4.052010e-01,6.275692e-01,7.826177e-01,-6.865844e-01,-4.788724e-01,-2.502905e-01,-9.345823e-17,2.502905e-01,4.788724e-01,6.865844e-01,-5.643750e-01,-3.421026e-01,-1.165601e-01,1.165601e-01,3.421026e-01,5.643750e-01,-4.266474e-01,-2.104724e-01,-2.818926e-18,2.104724e-01,4.266474e-01,-2.866763e-01,-9.181211e-02,9.181211e-02,2.866763e-01,-1.591740e-01,-3.816392e-17,1.591740e-01,-5.901522e-02,5.901522e-02,-4.857226e-17,-6.478791e-01,-4.827518e-01,-2.571743e-01,-1.908196e-17,2.571743e-01,4.827518e-01,6.478791e-01,-5.437526e-01,-3.345651e-01,-1.148974e-01,1.148974e-01,3.345651e-01,5.437526e-01,-4.190581e-01,-2.067096e-01,2.081668e-17,2.067096e-01,4.190581e-01,-2.866763e-01,-9.181211e-02,9.181211e-02,2.866763e-01,-1.618838e-01,-6.071532e-18,1.618838e-01,-6.100076e-02,6.100076e-02,-1.734723e-17,-5.000000e-01,-3.342459e-01,-1.172771e-01,1.172771e-01,3.342459e-01,5.000000e-01,-3.952467e-01,-1.956992e-01,-7.112366e-17,1.956992e-01,3.952467e-01,-2.764510e-01,-8.761895e-02,8.761895e-02,2.764510e-01,-1.591740e-01,-4.683753e-17,1.591740e-01,-6.100076e-02,6.100076e-02,-3.697785e-32,-3.521209e-01,-1.953852e-01,-4.857226e-17,1.953852e-01,3.521209e-01,-2.544004e-01,-7.879390e-02,7.879390e-02,2.544004e-01,-1.504986e-01,-1.387779e-17,1.504986e-01,-5.901522e-02,5.901522e-02,1.734723e-17,-2.173823e-01,-7.974554e-02,7.974554e-02,2.173823e-01,-1.342388e-01,-2.428613e-17,1.342388e-01,-5.449331e-02,5.449331e-02,6.938894e-18,-1.077583e-01,-9.714451e-17,1.077583e-01,-4.635024e-02,4.635024e-02,4.163336e-17,-3.299928e-02,3.299928e-02,2.081668e-17,0])
            y=np.array([-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.773503e-01,-5.201938e-01,-4.970693e-01,-4.829651e-01,-4.751329e-01,-4.716939e-01,-4.716939e-01,-4.751329e-01,-4.829651e-01,-4.970693e-01,-5.201938e-01,-3.907075e-01,-3.448418e-01,-3.166791e-01,-3.016529e-01,-2.969593e-01,-3.016529e-01,-3.166791e-01,-3.448418e-01,-3.907075e-01,-2.008330e-01,-1.367159e-01,-9.852301e-02,-8.081233e-02,-8.081233e-02,-9.852301e-02,-1.367159e-01,-2.008330e-01,3.254108e-02,1.072370e-01,1.484796e-01,1.616247e-01,1.484796e-01,1.072370e-01,3.254108e-02,2.886751e-01,3.644568e-01,4.001759e-01,4.001759e-01,3.644568e-01,2.886751e-01,5.448092e-01,6.118488e-01,6.333582e-01,6.118488e-01,5.448092e-01,7.781833e-01,8.278069e-01,8.278069e-01,7.781833e-01,9.680578e-01,9.941386e-01,9.680578e-01,1.097544e+00,1.097544e+00,1.154701e+00,-5.582981e-01,-5.505899e-01,-5.458885e-01,-5.432778e-01,-5.421315e-01,-5.421315e-01,-5.432778e-01,-5.458885e-01,-5.505899e-01,-5.582981e-01,-4.703090e-01,-4.256174e-01,-4.004511e-01,-3.894641e-01,-3.863225e-01,-3.894641e-01,-4.004511e-01,-4.256174e-01,-4.703090e-01,-3.133800e-01,-2.639760e-01,-2.266201e-01,-2.108414e-01,-2.108414e-01,-2.266201e-01,-2.639760e-01,-3.133800e-01,-1.026434e-01,-5.050312e-02,-1.183314e-02,-1.050592e-16,-1.183314e-02,-5.050312e-02,-1.026434e-01,1.424558e-01,1.931613e-01,2.226745e-01,2.226745e-01,1.931613e-01,1.424558e-01,3.996756e-01,4.399672e-01,4.532401e-01,4.399672e-01,3.996756e-01,6.459212e-01,6.644271e-01,6.644271e-01,6.459212e-01,8.592686e-01,8.512348e-01,8.592686e-01,1.020899e+00,1.020899e+00,1.116596e+00,-5.151360e-01,-4.998474e-01,-4.904599e-01,-4.854511e-01,-4.838866e-01,-4.854511e-01,-4.904599e-01,-4.998474e-01,-5.151360e-01,-4.054623e-01,-3.549594e-01,-3.277937e-01,-3.168568e-01,-3.168568e-01,-3.277937e-01,-3.549594e-01,-4.054623e-01,-2.297887e-01,-1.760332e-01,-1.442856e-01,-1.345920e-01,-1.442856e-01,-1.760332e-01,-2.297887e-01,-6.623872e-03,4.117461e-02,6.729600e-02,6.729600e-02,4.117461e-02,-6.623872e-03,2.419433e-01,2.756822e-01,2.885712e-01,2.756822e-01,2.419433e-01,4.920750e-01,5.038269e-01,5.038269e-01,4.920750e-01,7.202486e-01,7.099188e-01,7.202486e-01,9.053097e-01,9.053097e-01,1.030272e+00,-4.518445e-01,-4.304721e-01,-4.177412e-01,-4.118376e-01,-4.118376e-01,-4.177412e-01,-4.304721e-01,-4.518445e-01,-3.282548e-01,-2.764771e-01,-2.505208e-01,-2.430326e-01,-2.505208e-01,-2.764771e-01,-3.282548e-01,-1.420438e-01,-9.149753e-02,-6.729600e-02,-6.729600e-02,-9.149753e-02,-1.420438e-01,8.470031e-02,1.215163e-01,1.345920e-01,1.215163e-01,8.470031e-02,3.271373e-01,3.420183e-01,3.420183e-01,3.271373e-01,5.597850e-01,5.529542e-01,5.597850e-01,7.587269e-01,7.587269e-01,9.036890e-01,-3.740532e-01,-3.491545e-01,-3.354070e-01,-3.310253e-01,-3.354070e-01,-3.491545e-01,-3.740532e-01,-2.434981e-01,-1.931613e-01,-1.723516e-01,-1.723516e-01,-1.931613e-01,-2.434981e-01,-5.501596e-02,-1.332832e-02,-2.818926e-17,-1.332832e-02,-5.501596e-02,1.655126e-01,1.856799e-01,1.856799e-01,1.655126e-01,3.904229e-01,3.863225e-01,3.904229e-01,5.926526e-01,5.926526e-01,7.481063e-01,-2.886751e-01,-2.634146e-01,-2.515082e-01,-2.515082e-01,-2.634146e-01,-2.886751e-01,-1.577582e-01,-1.129870e-01,-1.011737e-01,-1.129870e-01,-1.577582e-01,2.418919e-02,5.058683e-02,5.058683e-02,2.418919e-02,2.273190e-01,2.259740e-01,2.273190e-01,4.211727e-01,4.211727e-01,5.773503e-01,-2.032971e-01,-1.809506e-01,-1.737808e-01,-1.809506e-01,-2.032971e-01,-7.873323e-02,-4.549168e-02,-4.549168e-02,-7.873323e-02,8.689039e-02,9.098336e-02,8.689039e-02,2.596838e-01,2.596838e-01,4.065942e-01,-1.255058e-01,-1.089646e-01,-1.089646e-01,-1.255058e-01,-1.457938e-02,8.673617e-18,-1.457938e-02,1.235439e-01,1.235439e-01,2.510115e-01,-6.221426e-02,-5.352064e-02,-6.221426e-02,2.676032e-02,2.676032e-02,1.244285e-01,-1.905215e-02,-1.905215e-02,3.810429e-02,0])
            z=np.array([-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-4.082483e-01,-3.543607e-01,-3.325587e-01,-3.192611e-01,-3.118768e-01,-3.086345e-01,-3.086345e-01,-3.118768e-01,-3.192611e-01,-3.325587e-01,-3.543607e-01,-3.325587e-01,-3.009570e-01,-2.831617e-01,-2.753927e-01,-2.731713e-01,-2.753927e-01,-2.831617e-01,-3.009570e-01,-3.325587e-01,-3.192611e-01,-2.831617e-01,-2.675554e-01,-2.615338e-01,-2.615338e-01,-2.675554e-01,-2.831617e-01,-3.192611e-01,-3.118768e-01,-2.753927e-01,-2.615338e-01,-2.577750e-01,-2.615338e-01,-2.753927e-01,-3.118768e-01,-3.086345e-01,-2.731713e-01,-2.615338e-01,-2.615338e-01,-2.731713e-01,-3.086345e-01,-3.086345e-01,-2.753927e-01,-2.675554e-01,-2.753927e-01,-3.086345e-01,-3.118768e-01,-2.831617e-01,-2.831617e-01,-3.118768e-01,-3.192611e-01,-3.009570e-01,-3.192611e-01,-3.325587e-01,-3.325587e-01,-3.543607e-01,-2.322798e-01,-1.890372e-01,-1.624851e-01,-1.483183e-01,-1.438931e-01,-1.483183e-01,-1.624851e-01,-1.890372e-01,-2.322798e-01,-1.890372e-01,-1.544918e-01,-1.244743e-01,-1.116052e-01,-1.116052e-01,-1.244743e-01,-1.544918e-01,-1.890372e-01,-1.624851e-01,-1.244743e-01,-1.020253e-01,-9.517092e-02,-1.020253e-01,-1.244743e-01,-1.624851e-01,-1.483183e-01,-1.116052e-01,-9.517092e-02,-9.517092e-02,-1.116052e-01,-1.483183e-01,-1.438931e-01,-1.116052e-01,-1.020253e-01,-1.116052e-01,-1.438931e-01,-1.483183e-01,-1.244743e-01,-1.244743e-01,-1.483183e-01,-1.624851e-01,-1.544918e-01,-1.624851e-01,-1.890372e-01,-1.890372e-01,-2.322798e-01,-5.326442e-02,7.185818e-03,4.319438e-02,5.989217e-02,5.989217e-02,4.319438e-02,7.185818e-03,-5.326442e-02,7.185818e-03,4.418277e-02,7.602153e-02,8.592499e-02,7.602153e-02,4.418277e-02,7.185818e-03,4.319438e-02,7.602153e-02,9.517092e-02,9.517092e-02,7.602153e-02,4.319438e-02,5.989217e-02,8.592499e-02,9.517092e-02,8.592499e-02,5.989217e-02,5.989217e-02,7.602153e-02,7.602153e-02,5.989217e-02,4.319438e-02,4.418277e-02,4.319438e-02,7.185818e-03,7.185818e-03,-5.326442e-02,1.667628e-01,2.371868e-01,2.760707e-01,2.884640e-01,2.760707e-01,2.371868e-01,1.667628e-01,2.371868e-01,2.731713e-01,2.971174e-01,2.971174e-01,2.731713e-01,2.371868e-01,2.760707e-01,2.971174e-01,3.060760e-01,2.971174e-01,2.760707e-01,2.884640e-01,2.971174e-01,2.971174e-01,2.884640e-01,2.760707e-01,2.731713e-01,2.760707e-01,2.371868e-01,2.371868e-01,1.667628e-01,4.082483e-01,4.796960e-01,5.133722e-01,5.133722e-01,4.796960e-01,4.082483e-01,4.796960e-01,5.066027e-01,5.165040e-01,5.066027e-01,4.796960e-01,5.133722e-01,5.165040e-01,5.165040e-01,5.133722e-01,5.133722e-01,5.066027e-01,5.133722e-01,4.796960e-01,4.796960e-01,4.082483e-01,6.497338e-01,7.129393e-01,7.332186e-01,7.129393e-01,6.497338e-01,7.129393e-01,7.208151e-01,7.208151e-01,7.129393e-01,7.332186e-01,7.208151e-01,7.332186e-01,7.129393e-01,7.129393e-01,6.497338e-01,8.697610e-01,9.165466e-01,9.165466e-01,8.697610e-01,9.165466e-01,9.028709e-01,9.165466e-01,9.165466e-01,9.165466e-01,8.697610e-01,1.048776e+00,1.073366e+00,1.048776e+00,1.073366e+00,1.073366e+00,1.048776e+00,1.170857e+00,1.170857e+00,1.170857e+00,1.224745e+00])

        case _:
            x=np.array([0., 0.])
            y=np.array([0., 0.])
            z=np.array([0., 0.])

    x = x[:,np.newaxis]
    y = y[:,np.newaxis]
    z = z[:,np.newaxis]
    return (x,y,z)

def xyztorst(X, Y, Z):
    ## dim=3
    # function [r,s,t] = xyztorst(x, y, z)
    # Purpose : Transfer from (x,y,z) in equilateral tetrahedron
    #           to (r,s,t) coordinates in standard tetrahedron
    v1 = np.transpose([-1,-1/math.sqrt(3), -1/math.sqrt(6)])
    v2 = np.transpose([ 1,-1/math.sqrt(3), -1/math.sqrt(6)])
    v3 = np.transpose([ 0, 2/math.sqrt(3), -1/math.sqrt(6)])
    v4 = np.transpose([ 0, 0/math.sqrt(3),  3/math.sqrt(6)])

    # back out right tet nodes
    a = 0.5*(v2+v3+v4-v1)
    rhs = np.squeeze([np.transpose(X),np.transpose(Y),np.transpose(Z)]) - np.tile(a.reshape(3, 1), (1,len(X)))
    A = np.transpose([0.5*(v2-v1),0.5*(v3-v1),0.5*(v4-v1)])
    RST = np.linalg.solve(A, rhs)
    r = np.transpose(RST[0,:])
    s = np.transpose(RST[1,:])
    t = np.transpose(RST[2,:])
    return (r, s, t)

def rsttoabc(r,s,t):
    ## dim=3    
    # function [a,b,c] = rsttoabc(r,s,t)
    # Purpose: Transfer from (r,s,t) -> (a,b,c) coordinates in triangle  

    Np = len(r)
    a = np.zeros((Np,1))
    b = np.zeros((Np,1))
    c = np.zeros((Np,1))

    for n in range(Np):
        if(s[n]+t[n] != 0):
            a[n] = 2*(1+r[n])/(-s[n]-t[n])-1
        else:
            a[n] = -1

        if(t[n] != 1):
            b[n] = 2*(1+s[n])/(1-t[n])-1
        else:
            b[n] = -1
    c[:,0] = t

    return (a,b,c)

def rsttoe(r, s, t, v1x, v1y, v1z, v2x, v2y, v2z, v3x, v3y, v3z, v4x, v4y, v4z):
    x = 0.5*(-(1+r+s+t)*v1x+(1+r)*v2x+(1+s)*v3x+(1+t)*v4x)
    y = 0.5*(-(1+r+s+t)*v1y+(1+r)*v2y+(1+s)*v3y+(1+t)*v4y)
    z = 0.5*(-(1+r+s+t)*v1z+(1+r)*v2z+(1+s)*v3z+(1+t)*v4z)
    return(x,y,z)

def xyztoabc(X, Y, Z, v1x, v1y, v1z, v2x, v2y, v2z, v3x, v3y, v3z, v4x, v4y, v4z):
    target_verts = np.array([[-1, -0.5773503, -0.4082483],[ 1, -0.5773503, -0.4082483],[ 0,  1.154701 , -0.4082483],[ 0,  0.       ,  1.224745 ]])
    T = np.array([[v2x-v1x,v2y-v1y,v2z-v1z], [v3x-v1x,v3y-v1y,v3z-v1z], [v4x-v1x,v4y-v1y,v4z-v1z]]).T  # Matriz 3x3
    v = [X-v1x, Y-v1y, Z-v1z]
    bary = np.linalg.solve(T, v)
    l1, l2, l3 = bary
    l0 = 1 - l1 - l2 - l3
    a,b,c = np.dot(np.array([l0, l1, l2, l3]), target_verts)
    return(a,b,c)

def find_bary(X, Y, Z, v1x, v1y, v1z, v2x, v2y, v2z, v3x, v3y, v3z, v4x, v4y, v4z):
    L1 = -np.ones((len(v1x), len(X)))
    L2 = -np.ones((len(v1x), len(X)))
    L3 = -np.ones((len(v1x), len(X)))
    T = np.array([[v2x-v1x,v2y-v1y,v2z-v1z], [v3x-v1x,v3y-v1y,v3z-v1z], [v4x-v1x,v4y-v1y,v4z-v1z]]).T  # Matriz 3x3
    for i in range(len(v1x)):
        v = np.array([X-v1x[i], Y-v1y[i], Z-v1z[i]])
        bary = np.linalg.solve(T[i], v) ####mal fait la division
        l1, l2, l3 = bary
        L1[i,:] = l1
        L2[i,:] = l2
        L3[i,:] = l3
    L0 = np.ones(np.shape(L1)) - L1 - L2 - L3
    return(L0, L1, L2, L3)

def find_pos(s_1,s_2):
    if(s_1[0]!=s_2[0]):
        if(s_1[0]!=s_2[1]):
            if(s_1[1]==s_2[1]):
                indj = 1
                signj = -1
            else:
                indj = 2
                signj = 1
        else:
            if(s_1[1]==s_2[0]):
                indj = 0
                signj = -1
            else:
                indj = 1
                signj = 1
    else:
        if(s_1[1]==s_2[1]):
            indj = 0
            signj = 1
        else:
            indj = 2
            signj = -1
    return(indj, signj)

def find_face(s,inters):
    a=set.difference(set(s),set(inters))
    if (a==s[0]):
        face=1
    elif (a==s[0]):
        face=2
    elif (a==s[0]):
        face=0
    elif (a==s[0]):
        face=3
    else:
        face=-1
    return face

def nodes_I2D(PolyDeg):
    Nb=PolyDeg+1
    cont = 2*Nb-1
    diff = Nb-2
    F1 = list(range(Nb))
    F2 = [Nb-1]
    F3 = [0, Nb]


    while (diff>0):
        F2.append(cont-1)
        F3.append(cont)
        cont = cont + diff
        diff = diff - 1
    F2.append(cont-1)
    F3 = F3[::-1]
    return (F1, F2, F3)

def nodes_I3D(PolyDeg):
    Nt=(PolyDeg+1)*(PolyDeg+2)*(PolyDeg+3)/6
    F1 = []
    F2 = []
    F3 = []
    F4 = list(range(int((PolyDeg+1)*(PolyDeg+2)/2)))

    diff = PolyDeg
    cont = 0
    while (diff>1):
        F1t, F2t, F3t = nodes_I2D(diff)
        F1.extend([int(x+cont) for x in F1t])
        F2.extend([int(x+cont) for x in F2t])
        F3.extend([int(x+cont) for x in F3t])
        cont = cont+(diff+1)*(diff+2)/2
        diff = diff-1
    F1.extend([int(Nt-4),int(Nt-3),int(Nt-1)])
    F2.extend([int(Nt-3),int(Nt-2),int(Nt-1)])
    F3.extend([int(Nt-2),int(Nt-4),int(Nt-1)])
    return (F1, F2, F3, F4)

